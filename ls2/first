display.c:		v->dir = opendir(v->path);
display.c:		while ((diread = readdir(v->dir)) != NULL)
display.c:			if (ft_strcmp(diread->d_name, v->first) != 0
display.c:					ft_strchr(v->first, '/')), v->first) != 0)
display.c:			if (stat(ft_strjoin(v->path, v->first), &st) < 0)
display.c:			if (lstat(ft_strjoin(v->path, v->first), &st) < 0)
display.c:			ft_printf("  %*d", v->len_link, st.st_nlink);
display.c:			ft_printf("  %*d", v->len_file, st.st_size);
display.c:		closedir(v->dir);
display.c:	if (v->file_path == 1)
display.c:		ft_printf("%s%s\n", v->path, v->path_end);
display.c:	if (ft_strcmp(diread.d_name, v->last) == 0)
display.c:		ft_printf("%-*s ", v->len, diread.d_name);
display.c:	v->dir = opendir(v->path);
display.c:	while ((diread = readdir(v->dir)) != NULL)
display.c:	closedir(v->dir);
display.c:	if (v->file_path == 1)
display.c:		ft_recursive_flag(v->path, flag, v);
display_long.c:		v->is_link = 1;
display_long.c:	if (!(buff = ft_strnew(v->len)))
display_long.c:	v->is_link = 0;
display_long.c:	v->dir = opendir(v->path);
display_long.c:	while ((diread = readdir(v->dir)) != NULL)
display_long.c:		pathname = ft_strjoin(v->path, v->first);
display_long.c:		ft_printf(" %*d", v->len_link, st.st_nlink);
display_long.c:		ft_printf(" %*d", v->len_file, st.st_size);
display_long.c:		if (v->is_link == 1)
display_long.c:	closedir(v->dir);
ft_ls_no_flag.c:	if (ft_strcmp(v->first, v->last) == 0)
ft_ls_no_flag.c:		ft_printf("%s", v->first);
ft_ls_no_flag.c://		free(v->first);
ft_ls_no_flag.c:		if (v->file_path == 1 && v->c_dir == 1)
ft_ls_no_flag.c:		ft_printf("%-*s ", v->len, v->first);
ft_ls_no_flag.c://		free(v->first);
ft_ls_no_flag.c:	if (v->is_link == 1)
ft_ls_no_flag.c:	pathname = ft_strjoin(v->path, diread->d_name);
ft_ls_no_flag.c:	if (v->len_file < count_lenf(st.st_size))
ft_ls_no_flag.c:		v->len_file = count_lenf(st.st_size);
ft_ls_no_flag.c:	if (v->len_link < count_lenf(st.st_nlink))
ft_ls_no_flag.c:		v->len_link = count_lenf(st.st_nlink);
ft_ls_no_flag.c:	v->len = 0;
ft_ls_no_flag.c:	v->dir = opendir(v->path);
ft_ls_no_flag.c:	while ((diread = readdir(v->dir)) != NULL)
ft_ls_no_flag.c:		if (v->len == 0)
ft_ls_no_flag.c:			v->first = ft_strdup(diread->d_name);
ft_ls_no_flag.c:			v->last = ft_strdup(diread->d_name);
ft_ls_no_flag.c:		if (v->len < ft_strlen(diread->d_name))
ft_ls_no_flag.c:			v->len = ft_strlen(diread->d_name);
ft_ls_no_flag.c:		if (ft_strcmp(v->last, diread->d_name) < 0)
ft_ls_no_flag.c:			free(v->last);
ft_ls_no_flag.c:			v->last = ft_strdup(diread->d_name);
ft_ls_no_flag.c:		if ((ft_strcmp(v->first, diread->d_name) > 0) && f->a == 0)
ft_ls_no_flag.c:			free(v->first);
ft_ls_no_flag.c:			v->first = ft_strdup(diread->d_name);
ft_ls_no_flag.c:	closedir(v->dir);
ft_ls_no_flag.c:		v->len = 0;
ft_ls_no_flag.c:	v->save = opendir(v->path);
ft_ls_no_flag.c:	while ((diread = readdir(v->save)) != NULL)
ft_ls_no_flag.c:		if ((ft_strcmp(v->first, diread->d_name) < 0) && v->mid == NULL)
ft_ls_no_flag.c:			v->mid = ft_strdup(diread->d_name);
ft_ls_no_flag.c:		if (ft_strcmp(v->first, v->mid) == 0
ft_ls_no_flag.c:				&& (ft_strcmp(v->first, diread->d_name) < 0))
ft_ls_no_flag.c:			free(v->mid);
ft_ls_no_flag.c:			v->mid = ft_strdup(diread->d_name);
ft_ls_no_flag.c:		if ((ft_strcmp(v->first, diread->d_name) < 0)
ft_ls_no_flag.c:				&& (ft_strcmp(v->mid, diread->d_name) > 0))
ft_ls_no_flag.c:			free(v->mid);
ft_ls_no_flag.c:			v->mid = ft_strdup(diread->d_name);
ft_ls_no_flag.c:	closedir(v->save);
ft_ls_no_flag.c:	v->first = ft_strdup(v->mid);
ft_ls_no_flag.c:	v->path = ft_strdup(".");
ft_ls_no_flag.c:	v->dir = opendir(".");
ft_ls_no_flag.c:	if (ft_strcmp(v->first, v->last) != 0)
ft_ls_no_flag.c:		while ((diread = readdir(v->dir)) != NULL
ft_ls_no_flag.c:				&& ft_strcmp(v->first, v->last) != 0)
ft_ls_no_flag.c:	closedir(v->dir);
multi_file.c:	while (v->path_long[i])
multi_file.c:		if (ft_strcmp(v->path_long[i], s) == 0)
multi_file.c:		if (stat(ft_strjoin(v->path, v->path_long[j]), &st) < 0)
multi_file.c:		v->time = st.st_mtime;
multi_file.c:			if (stat(ft_strjoin(v->path, v->path_long[i]), &st) < 0)
multi_file.c:			if (cmp_time(v->time, st.st_mtime) == 0
multi_file.c:				&& ft_strcmp(v->path_long[j], v->path_long[i]) < 0)
multi_file.c:				tmp = ft_strdup(v->path_long[i]);
multi_file.c:				v->path_long[i] = ft_strdup(v->path_long[j]);
multi_file.c:				v->path_long[j] = ft_strdup(tmp);
multi_file.c:		if (stat(ft_strjoin("./", v->path_long[j]), &st) < 0)
multi_file.c:		v->time = st.st_mtime;
multi_file.c:			if (stat(ft_strjoin("./", v->path_long[i]), &st) < 0)
multi_file.c:			if (cmp_time(v->time, st.st_mtime) > 0)
multi_file.c:				tmp = ft_strdup(v->path_long[j]);
multi_file.c:				v->path_long[j] = ft_strdup(v->path_long[i]);
multi_file.c:				v->path_long[i] = ft_strdup(tmp);
multi_file.c:	v->stock_d[i] = ft_strdup(str);
multi_file.c:	v->stock_d[i] = NULL;
multi_file.c:	v->path = ft_strjoin(path, "/");
multi_file.c:	while (v->path_long[i])
multi_file.c:		if (is_directory(v->path_long[i], v) == 1)
multi_file.c:			stock_dir(v->path_long[i], v);
multi_file.c:		if (v->path_long[i][0] != '-')
multi_file.c:			v->first = v->path_long[i];
multi_file.c:			v->path = "./";
multi_file.c:	while (v->stock_d[i])
multi_file.c:		if (v->stock_d[i + 1] == NULL)
multi_file.c:			v->c_dir = 0;
multi_file.c:		print_multi_file(v->stock_d[i++], v, f);
parser.c:	if ((v->dir = opendir(ft_strsub(str, 0, start))) == NULL)
parser.c:	v->path_end = ft_strsub(str, start + 1, end - start);
parser.c:	v->path = ft_strsub(str, 0, start + 1);
parser.c:	if ((v->dir = opendir(str)) == NULL && ft_strchr(str, '/') != NULL)
parser.c:		v->dir = opendir(ft_get_path(str, v));
parser.c:	else if ((v->dir = opendir(str)) == NULL && ft_strchr(str, '/') == NULL)
parser.c:		v->dir = opendir("./");
parser.c:		v->path_end = str;
parser.c:		v->c_dir = 1;
parser.c:		v->path = ft_strjoin(str, "/");
parser.c:	while ((diread = readdir(v->dir)) != NULL)
parser.c:		if (ft_strcmp(diread->d_name, v->path_end) != 0)
parser.c:		else if (ft_strcmp(diread->d_name, v->path_end) == 0)
parser.c:			v->file_path = 1;
parser.c:			closedir(v->dir);
parser.c:	closedir(v->dir);
parser.c:		v->invalid = str[i];
recursive.c:	v->path = str;
recursive.c:	name_count = ft_count_names(v->path, flag);
recursive.c:	ft_stock_names(v->path, stock, flag);
recursive.c:	ft_putstr(v->path);
time_order.c:	if (cmp_time(v->time_m, st.st_mtime) == 0
time_order.c:			&& ft_strcmp(v->mid, diread->d_name) < 0)
time_order.c:		v->time_m = st.st_mtime;
time_order.c:		v->mid = ft_strdup(diread->d_name);
time_order.c:	else if (cmp_time(v->time_m, st.st_mtime) > 0)
time_order.c:		v->time_m = st.st_mtime;
time_order.c:		v->mid = ft_strdup(diread->d_name);
time_order.c:	if (cmp_time(v->time, st.st_mtime) == 0
time_order.c:			&& ft_strcmp(v->first, diread->d_name) > 0)
time_order.c:		v->time_m = st.st_mtime;
time_order.c:		v->mid = ft_strdup(diread->d_name);
time_order.c:	if ((cmp_time(v->time, st.st_mtime)) < 0 && v->time_m == 0)
time_order.c:		v->time_m = st.st_mtime;
time_order.c:		v->mid = ft_strdup(diread->d_name);
time_order.c:	if (cmp_time(v->time, v->time_m) == 0
time_order.c:			&& cmp_time(v->time, st.st_mtime) < 0 && i == 0)
time_order.c:		v->time_m = st.st_mtime;
time_order.c:		v->mid = ft_strdup(diread->d_name);
time_order.c:	if (cmp_time(v->time, st.st_mtime) < 0
time_order.c:			&& cmp_time(v->time_m, st.st_mtime) >= 0 && i == 0)
time_order.c:	if (cmp_time(v->time, st.st_mtime) == 0
time_order.c:			&& ft_strcmp(v->first, diread->d_name) < 0)
time_order.c:		v->time_m = st.st_mtime;
time_order.c:		v->mid = ft_strdup(diread->d_name);
time_order.c:	v->save = opendir(v->path);
time_order.c:	while ((diread = readdir(v->save)) != NULL)
time_order.c:		pathname = ft_strjoin(v->path, diread->d_name);
time_order.c:	closedir(v->save);
time_order.c:	if (cmp_time(v->time, v->time_m) == 0)
time_order.c:	v->first = v->mid;
time_order.c:	v->time = v->time_m;
time_order.c:	v->dir = opendir(v->path);
time_order.c:	while ((diread = readdir(v->dir)) != NULL)
time_order.c:		if (stat(ft_strjoin(v->path, diread->d_name), &st) < 0)
time_order.c:		if (cmp_time(st.st_mtime, v->time_l) <= 0)
time_order.c:			if (ft_strcmp(v->last, diread->d_name) < 0
time_order.c:					|| cmp_time(st.st_mtime, v->time_l) < 0)
time_order.c:				v->last = ft_strdup(diread->d_name);
time_order.c:				v->time_l = st.st_mtime;
time_order.c:	closedir(v->dir);
tools.c:	v->dir = opendir(v->path);
tools.c:	while ((diread = readdir(v->dir)))
tools.c:		pathname = ft_strjoin(v->path, diread->d_name);
tools.c:	closedir(v->dir);
tools.c:		ft_putchar_fd(v->invalid, 2);
tools.c:	v->path = "./";
tools.c:	v->path_end = NULL;
tools.c:	v->file_path = 0;
tools.c:	v->is_link = 0;
tools.c:	v->len = 0;
tools.c:	v->len_file = 0;
tools.c:	v->len_link = 0;
tools.c:	v->path_long = av;
tools.c:	v->c_dir = 0;
tools.c:	v->time_m = 0;
tools.c:	v->mid = NULL;
tools2.c:		s = ft_strdup(v->first);
tools2.c:		v->first = ft_strdup(v->last);
tools2.c:		v->last = ft_strdup(s);
tools2.c:		if (is_directory(v->path_long[j], v) == 0 && v->path_long[j][0] != '-')
tools2.c:			v->last = v->path_long[j];
tools2.c:		if (v->len < ft_strlen(v->path_long[j]))
tools2.c:			v->len = ft_strlen(v->path_long[j]);
tools2.c:			if (ft_strcmp(v->path_long[j], v->path_long[i]) < 0)
tools2.c:				tmp = v->path_long[j];
tools2.c:				v->path_long[j] = v->path_long[i];
tools2.c:				v->path_long[i] = tmp;
tools2.c:			if (v->len < ft_strlen(v->path_long[i]))
tools2.c:				v->len = ft_strlen(v->path_long[i]);
tools2.c:	if ((ft_strcmp(v->first, diread->d_name) > 0) && i == 0)
tools2.c:		v->mid = ft_strdup(diread->d_name);
tools2.c:	if (ft_strcmp(v->first, v->mid) == 0
tools2.c:		&& (ft_strcmp(v->first, diread->d_name) > 0))
tools2.c:		v->mid = ft_strdup(diread->d_name);
tools2.c:	if ((ft_strcmp(v->first, diread->d_name) > 0)
tools2.c:		&& (ft_strcmp(v->mid, diread->d_name) < 0))
tools2.c:		v->mid = ft_strdup(diread->d_name);
tools3.c:	pathname = ft_strjoin(v->path, v->first);
tools3.c:	while (v->path_long[i])
tools3.c:		if (is_directory(v->path_long[i], v) == 1)
tools3.c:		v->file_path = 1;
tools3.c:	if (!(v->stock_d = (char**)malloc(sizeof(char*) * j + 1)))
tools3.c:		v->stock_d[i++] = NULL;
tools3.c:	if ((v->dir = opendir(str)) == NULL)
tools3.c:	closedir(v->dir);
tools3.c:	v->dir = opendir(v->path);
tools3.c:	while ((diread = readdir(v->dir)) != NULL)
tools3.c:		while (v->path_long[j])
tools3.c:			if (ft_strcmp(v->path_long[j], diread->d_name) != 0)
tools3.c:	closedir(v->dir);
tools_time.c:	if (ft_strcmp(v->first, v->mid) == 0
tools_time.c:			&& (ft_strcmp(v->first, s) > 0))
tools_time.c:		v->mid = ft_strdup(s);
tools_time.c:	if ((ft_strcmp(v->first, s) > 0)
tools_time.c:			&& (ft_strcmp(v->mid, s) < 0))
tools_time.c:		v->mid = ft_strdup(s);
tools_time.c:	v->save = opendir(v->path);
tools_time.c:	while ((diread = readdir(v->save)) != NULL)
tools_time.c:		pathname = ft_strjoin(v->path, diread->d_name);
tools_time.c:		if (cmp_time(v->time, st.st_mtime) == 0)
tools_time.c:			if (ft_strcmp(v->first, v->mid) == 0
tools_time.c:					&& (ft_strcmp(v->first, diread->d_name) < 0))
tools_time.c:				v->mid = ft_strdup(diread->d_name);
tools_time.c:			if ((ft_strcmp(v->first, diread->d_name) < 0)
tools_time.c:					&& (ft_strcmp(v->mid, diread->d_name) > 0))
tools_time.c:				v->mid = ft_strdup(diread->d_name);
tools_time.c:	v->first = v->mid;
tools_time.c:	closedir(v->save);
tools_time.c:		v->time_m = v->time;
tools_time.c:		v->time = v->time_l;
tools_time.c:		v->time_l = v->time_m;
tools_time.c:		v->time_m = 0;
tools_time.c:		v->mid = ft_strdup(v->first);
tools_time.c:		v->first = ft_strdup(v->last);
tools_time.c:		v->last = ft_strdup(v->mid);
tools_time.c:		v->mid = NULL;
tools_time.c:		v->last = ft_strdup(diread->d_name);
tools_time.c:		v->time_l = st.st_mtime;
tools_time.c:		v->first = ft_strdup(diread->d_name);
tools_time.c:		v->time = st.st_mtime;
tools_time.c:	if (cmp_time(st.st_mtime, v->time) >= 0)
tools_time.c:		if (ft_strcmp(v->first, diread->d_name) > 0
tools_time.c:			|| cmp_time(st.st_mtime, v->time) > 0)
tools_time.c:			v->first = ft_strdup(diread->d_name);
tools_time.c:			v->time = st.st_mtime;
tools_time2.c:	if (cmp_time(v->time_m, st.st_mtime) == 0
tools_time2.c:				&& ft_strcmp(v->mid, diread->d_name) > 0)
tools_time2.c:		v->time_m = st.st_mtime;
tools_time2.c:		v->mid = ft_strdup(diread->d_name);
tools_time2.c:	else if (cmp_time(v->time_m, st.st_mtime) < 0)
tools_time2.c:		v->time_m = st.st_mtime;
tools_time2.c:		v->mid = ft_strdup(diread->d_name);
tools_time2.c:	if ((cmp_time(v->time, st.st_mtime)) > 0 && v->time_m == 0)
tools_time2.c:		v->time_m = st.st_mtime;
tools_time2.c:		v->mid = ft_strdup(diread->d_name);
tools_time2.c:	if (cmp_time(v->time, v->time_m) == 0
tools_time2.c:			&& cmp_time(v->time, st.st_mtime) > 0 && i == 0)
tools_time2.c:		v->time_m = st.st_mtime;
tools_time2.c:		v->mid = ft_strdup(diread->d_name);
tools_time2.c:	if (cmp_time(v->time, st.st_mtime) > 0
tools_time2.c:			&& cmp_time(v->time_m, st.st_mtime) <= 0 && i == 0)
tools_time2.c:	while (v->path_long[i])
